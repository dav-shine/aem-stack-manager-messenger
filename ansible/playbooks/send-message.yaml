---
- name: SNS Message Sender
  hosts: all
  gather_facts: no
  connection: local

  vars:
    subject: "{{target_aem_stack_prefix}} - {{ message_type }}"
# files are in .txt as they need to replace the variables e.g. 'target_aem_stack_prefix' (un-quoted) which breaks the json validation.
# if the variables were in double quotes, they would not be replaced with the value.
    message: "{{ lookup('file', '../../files/{{ message_type }}.json') }}"
    message_types_check_success_only:
      - test-readiness-consolidated
      - test-readiness-full-set

  tasks:

    - set_fact:
        main_stack_name: "{{ stack_prefix }}-aem-main-stack-manager"

    - name: "{{ subject }}: Retrieve Main Stack CloudFormation resources facts"
      cloudformation_facts:
        stack_name: "{{ main_stack_name }}"
        region: "{{ aws.region }}"
      register: main_stack_facts

    - set_fact:
        stack_manager_stack_arn: "{{ main_stack_facts.ansible_facts.cloudformation[main_stack_name].stack_outputs.StackManagerStackArn }}"

    - set_fact:
        stack_manager_stack_name: "{{ stack_manager_stack_arn.split('/')[1] }}"

    - name: "{{ subject }}: Retrieve Stack Manager CloudFormation resources facts"
      cloudformation_facts:
        stack_name: "{{ stack_manager_stack_name }}"
        region: "{{ aws.region }}"
      register: stack_manager_stack_facts

    - set_fact:
        stack_manager_stack_outputs: "{{ stack_manager_stack_facts.ansible_facts.cloudformation[stack_manager_stack_name].stack_outputs }}"
        s3_bucket: "{{ stack_manager_stack_facts.ansible_facts.cloudformation[stack_manager_stack_name].stack_parameters.DataBucketNameParameter }}"

    - set_fact:
        dynamodb_tablename: "{{ stack_manager_stack_outputs.AemStackManagerTableName }}"
        sns_topic: "{{ stack_manager_stack_outputs.StackManagerTopicArn }}"

    - debug:
        msg: "Send message: {{ message }}, with subject: {{ subject }}, to topic: {{ sns_topic }}, in region: {{ aws.region }}"

    - name: "{{ subject }}: Send message to SNS Topic"
      sns:
        msg: "{{ message }}"
        subject: "{{ subject }}"
        topic: "{{ sns_topic }}"
        region: "{{ aws.region }}"
      register: publish_message

    - name: "{{ subject }}: Poll to check if message was successfully sent"
      dynamodb_search:
        table_name: "{{ dynamodb_tablename }}"
        attribute: message_id
        attribute_value: "{{ publish_message.item.PublishResponse.PublishResult.MessageId }}"
        get_attribute: command_id
        select: SPECIFIC_ATTRIBUTES
        comparisonoperator: EQ
        state: scan
        region: "{{ aws.region }}"
      register: dbscan
      until: dbscan.item != []
      retries: "{{ poll_timeout.check_message_sent.retries }}"
      delay: "{{ poll_timeout.check_message_sent.delay }}"

    - set_fact:
        cmd_id: "{{ item.command_id.S }}"
      with_items:
        "{{ dbscan.item }}"

    - set_fact:
        expected_states: ["Success"]
      when: message_type in message_types_check_success_only

    - set_fact:
        expected_states: ["Success", "Failed"]
      when: message_type not in message_types_check_success_only

    - name: "{{ subject }}: Poll to check if command was executed"
      dynamodb_search:
        table_name: "{{ dynamodb_tablename }}"
        attribute: command_id
        attribute_value: "{{ cmd_id }}"
        get_attribute: state
        select: SPECIFIC_ATTRIBUTES
        comparisonoperator: EQ
        state: query
        region: "{{ aws.region }}"
      register: dbquery
      until:  dbquery.item[0].state.S in expected_states
      # The retry values should mirror the TTL of the ssm.send_command of the Lambda function.
      retries: "{{ poll_timeout.check_command_execution.retries }}"
      delay: "{{ poll_timeout.check_command_execution.delay }}"

    - name: "{{ subject }}: Check if command failed"
      set_fact:
        general_error: 1
      when: dbquery.item[0].state.S == "Failed"

    - name: "{{ subject }}: Get path to log files"
      aws_s3:
        mode: list
        bucket: "{{ s3_bucket }}"
        prefix: "{{ stack_prefix }}/stack-manager/SSMOutput/{{ cmd_id }}"
      register: output_files

    - name: "{{ subject }}: Set facts for getting command output"
      set_fact:
        log_path: "{{ playbook_dir }}/../../logs/"
        dl_path: "{{ stack_prefix }}/stack-manager/SSMOutput/{{ cmd_id }}"
        s3_files: "{{ output_files.s3_keys }}"
      when: cmd_id is defined

    - name: "{{ subject }}: Create Download directory in {{log_path }}/{{ dl_path }}"
      file:
        path: "{{ log_path }}/{{ item|regex_replace('(stdout|stderr)$', '') }}"
        state: directory
      with_items:
        - "{{ s3_files }}"
      when: general_error is defined or show_log_on_failure_only == false

    - name: "{{ subject }}: Save log files"
      aws_s3:
        mode: get
        bucket: "{{ s3_bucket }}"
        object: "{{ item }}"
        dest: "{{ log_path }}{{ item }}"
      with_items:
        - "{{ s3_files }}"
      register: saved_files
      when: general_error is defined or show_log_on_failure_only == false

    - name: "{{ subject }}: Find non-error log files"
      find:
        paths: "{{log_path }}{{ dl_path }}"
        file_type: file
        patterns: stdout
        recurse: yes
      register: stdout_files
      when: show_log_on_failure_only == false

    - name: "{{ subject }}: Show non-error log files content"
      log_output:
        type: file
        log_files: "{{ stdout_files.files | map(attribute='path')|list }}"
      when: show_log_on_failure_only == false

    - name: "{{ subject }}: Find error log files"
      find:
        paths: "{{log_path }}{{ dl_path }}"
        file_type: file
        patterns: stderr
        recurse: yes
      register: stderr_files
      when: general_error is defined

    - name: "{{ subject }}: Show error log files content"
      log_output:
        type: file
        log_files: "{{ stderr_files.files | map(attribute='path')|list }}"
      when: general_error is defined

    - fail:
        msg: "Error: Failed executing event {{ message_type }}"
      when: general_error is defined
